/**
 *   Wechaty - https://github.com/chatie/wechaty
 *
 *   @copyright 2016-2018 Huan LI <zixia@zixia.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import cuid from 'cuid';
import path from 'path';
import fs from 'fs';
import fsPromise from 'fs/promises';
import xml2js from 'xml2js';
import os from 'os';
import * as PUPPET from 'wechaty-puppet';
import { log } from 'wechaty-puppet';
import { FileBox, FileBoxType, } from 'file-box';
import { attach, detach, } from 'sidecar';
import { CHATIE_OFFICIAL_ACCOUNT_QRCODE, qrCodeForChatie, VERSION, } from './config.js';
import { WeChatSidecar } from './wechat-sidecar.js';
import { ImageDecrypt } from './pure-functions/image-decrypt.js';
const userInfo = os.userInfo();
const rootPath = `${userInfo.homedir}\\Documents\\WeChat Files\\`;
class PuppetXp extends PUPPET.Puppet {
    options;
    static VERSION = VERSION;
    messageStore;
    roomStore;
    contactStore;
    scanEventData;
    selfInfo;
    #sidecar;
    get sidecar() {
        return this.#sidecar;
    }
    constructor(options = {}) {
        super(options);
        this.options = options;
        log.verbose('PuppetXp', 'constructor(%s)', JSON.stringify(options));
        // FIXME: use LRU cache for message store so that we can reduce memory usage
        this.messageStore = {};
        this.roomStore = {};
        this.contactStore = {};
        this.selfInfo = {};
    }
    version() {
        return VERSION;
    }
    async onStart() {
        log.verbose('PuppetXp', 'onStart()');
        if (this.#sidecar) {
            // Huan(2021-09-13): need to call `detach` to make sure the sidecar will be closed?
            await detach(this.#sidecar);
            this.#sidecar = undefined;
            log.warn('PuppetXp', 'onStart() this.#sidecar exists? will be replaced by a new one.');
        }
        this.#sidecar = new WeChatSidecar();
        await attach(this.sidecar);
        this.sidecar.on('hook', ({ method, args }) => {
            log.verbose('PuppetXp', 'onHook(%s, %s)', method, JSON.stringify(args));
            switch (method) {
                case 'recvMsg':
                    this.onHookRecvMsg(args);
                    break;
                case 'checkQRLogin':
                    this.onScan(args);
                    break;
                case 'loginEvent':
                    void this.onLogin();
                    break;
                case 'agentReady':
                    void this.onAgentReady();
                    break;
                case 'logoutEvent':
                    void this.onLogout(args[0]);
                    break;
                default:
                    log.warn('PuppetXp', 'onHook(%s,...) lack of handing', method, JSON.stringify(args));
                    break;
            }
        });
        this.sidecar.on('error', e => this.emit('error', { data: JSON.stringify(e) }));
    }
    async onAgentReady() {
        log.verbose('PuppetXp', 'onAgentReady()');
        const isLoggedIn = await this.sidecar.isLoggedIn();
        if (!isLoggedIn) {
            await this.sidecar.callLoginQrcode(false);
        }
    }
    async onLogin() {
        this.selfInfo = JSON.parse(await this.sidecar.getMyselfInfo());
        await this.loadContactList();
        await this.loadRoomList();
        await super.login(this.selfInfo.id);
        // console.debug(this.roomStore)
        // console.debug(this.contactStore)
    }
    async onLogout(reasonNum) {
        await super.logout(reasonNum ? 'Kicked by server' : 'logout');
    }
    onScan(args) {
        const statusMap = [
            PUPPET.types.ScanStatus.Waiting,
            PUPPET.types.ScanStatus.Scanned,
            PUPPET.types.ScanStatus.Confirmed,
            PUPPET.types.ScanStatus.Timeout,
            PUPPET.types.ScanStatus.Cancel,
        ];
        const status = args[0];
        const qrcodeUrl = args[1];
        const wxid = args[2];
        const avatarUrl = args[3];
        const nickname = args[4];
        const phoneType = args[5];
        const phoneClientVer = args[6];
        const pairWaitTip = args[7];
        log.info('PuppetXp', 'onScan() data: %s', JSON.stringify({
            avatarUrl,
            nickname,
            pairWaitTip,
            phoneClientVer: phoneClientVer.toString(16),
            phoneType,
            qrcodeUrl,
            status,
            wxid,
        }, null, 2));
        if (pairWaitTip) {
            log.warn('PuppetXp', 'onScan() pairWaitTip: "%s"', pairWaitTip);
        }
        this.scanEventData = {
            qrcode: qrcodeUrl,
            status: statusMap[args[0]] ?? PUPPET.types.ScanStatus.Unknown,
        };
        this.emit('scan', this.scanEventData);
    }
    onHookRecvMsg(args) {
        // console.info(args)
        let type = PUPPET.types.Message.Unknown;
        let roomId = '';
        let toId = '';
        let talkerId = '';
        const text = String(args[2]);
        switch (args[0]) {
            case 1:
                type = PUPPET.types.Message.Text;
                break;
            case 3:
                type = PUPPET.types.Message.Image;
                break;
            case 34:
                type = PUPPET.types.Message.Audio;
                break;
            case 37:
                break;
            case 40:
                break;
            case 42:
                type = PUPPET.types.Message.Contact;
                break;
            case 43:
                type = PUPPET.types.Message.Video;
                break;
            case 47:
                type = PUPPET.types.Message.Emoticon;
                break;
            case 48:
                type = PUPPET.types.Message.Location;
                break;
            case 49:
                try {
                    xml2js.parseString(text, { explicitArray: false, ignoreAttrs: true }, function (err, json) {
                        // console.info(err)
                        // console.info(JSON.stringify(json))
                        log.verbose('PuppetXp', 'xml2json err:%s', err);
                        log.verbose('PuppetXp', 'json content:%s', JSON.stringify(json));
                        switch (json.msg.appmsg.type) {
                            case '5':
                                type = PUPPET.types.Message.Url;
                                break;
                            case '6':
                                type = PUPPET.types.Message.Attachment;
                                break;
                            case '19':
                                type = PUPPET.types.Message.ChatHistory;
                                break;
                            case '33':
                                type = PUPPET.types.Message.MiniProgram;
                                break;
                            case '2000':
                                type = PUPPET.types.Message.Transfer;
                                break;
                            case '2001':
                                type = PUPPET.types.Message.RedEnvelope;
                                break;
                            default:
                        }
                    });
                }
                catch (err) {
                    console.error(err);
                }
                break;
            case 50:
                break;
            case 51:
                break;
            case 52:
                break;
            case 53:
                break;
            case 62:
                break;
            case 9999:
                break;
            case 10000:
                break;
            case 10002:
                break;
            default:
        }
        if (String(args[1]).split('@').length !== 2) {
            talkerId = String(args[1]);
            toId = this.currentUserId;
        }
        else {
            talkerId = String(args[3]);
            roomId = String(args[1]);
        }
        // revert talkerId and toId according to isMyMsg
        if (args[5] === 1) {
            toId = talkerId;
            talkerId = this.selfInfo.id;
        }
        const payload = {
            id: cuid(),
            roomId,
            talkerId,
            text,
            timestamp: Date.now(),
            toId,
            type,
        };
        // console.info(payload)
        this.messageStore[payload.id] = payload;
        this.emit('message', { messageId: payload.id });
    }
    async onStop() {
        log.verbose('PuppetXp', 'onStop()');
        this.sidecar.removeAllListeners();
        if (this.logonoff()) {
            await this.logout();
        }
        await detach(this.sidecar);
        this.#sidecar = undefined;
    }
    login(contactId) {
        log.verbose('PuppetXp', 'login()');
        super.login(contactId);
    }
    ding(data) {
        log.silly('PuppetXp', 'ding(%s)', data || '');
        setTimeout(() => this.emit('dong', { data: data || '' }), 1000);
    }
    async loadContactList() {
        const contactList = JSON.parse(await this.sidecar.getContact());
        for (const contactKey in contactList) {
            const contactInfo = contactList[contactKey];
            const contact = {
                alias: contactInfo.alias,
                avatar: contactInfo.avatarUrl,
                friend: true,
                gender: contactInfo.gender,
                id: contactInfo.id,
                name: contactInfo.name,
                phone: [],
                type: PUPPET.types.Contact.Unknown,
            };
            this.contactStore[contactInfo.id] = contact;
        }
    }
    async loadRoomList() {
        const roomList = JSON.parse(await this.sidecar.getChatroomMemberInfo());
        for (const roomKey in roomList) {
            const roomInfo = roomList[roomKey];
            const roomId = roomInfo.roomid;
            const roomMember = roomInfo.roomMember || [];
            const topic = this.contactStore[roomId]?.name || '';
            const room = {
                adminIdList: [],
                avatar: '',
                external: false,
                id: roomId,
                memberIdList: roomMember,
                ownerId: '',
                topic: topic,
            };
            this.roomStore[roomId] = room;
            for (const memberKey in roomMember) {
                const memberId = roomMember[memberKey];
                if (!this.contactStore[memberId]) {
                    try {
                        const memberNickName = await this.sidecar.getChatroomMemberNickInfo(memberId, roomId);
                        const contact = {
                            alias: '',
                            avatar: '',
                            friend: false,
                            gender: PUPPET.types.ContactGender.Unknown,
                            id: memberId,
                            name: memberNickName,
                            phone: [],
                            type: PUPPET.types.Contact.Unknown,
                        };
                        this.contactStore[memberId] = contact;
                    }
                    catch (err) {
                        console.error(err);
                    }
                }
            }
        }
    }
    /**
     *
     * ContactSelf
     *
     *
     */
    async contactSelfQRCode() {
        log.verbose('PuppetXp', 'contactSelfQRCode()');
        return CHATIE_OFFICIAL_ACCOUNT_QRCODE;
    }
    async contactSelfName(name) {
        log.verbose('PuppetXp', 'contactSelfName(%s)', name);
        if (!name) {
            return this.selfInfo.name;
        }
    }
    async contactSelfSignature(signature) {
        log.verbose('PuppetXp', 'contactSelfSignature(%s)', signature);
    }
    async contactAlias(contactId, alias) {
        log.verbose('PuppetXp', 'contactAlias(%s, %s)', contactId, alias);
        const contact = await this.contactRawPayload(contactId);
        // if (typeof alias === 'undefined') {
        //   throw new Error('to be implement')
        // }
        return contact.alias;
    }
    async contactPhone(contactId, phoneList) {
        log.verbose('PuppetXp', 'contactPhone(%s, %s)', contactId, phoneList);
        if (typeof phoneList === 'undefined') {
            return [];
        }
    }
    async contactCorporationRemark(contactId, corporationRemark) {
        log.verbose('PuppetXp', 'contactCorporationRemark(%s, %s)', contactId, corporationRemark);
    }
    async contactDescription(contactId, description) {
        log.verbose('PuppetXp', 'contactDescription(%s, %s)', contactId, description);
    }
    async contactList() {
        log.verbose('PuppetXp', 'contactList()');
        const idList = Object.keys(this.contactStore);
        return idList;
    }
    async contactAvatar(contactId, file) {
        log.verbose('PuppetXp', 'contactAvatar(%s)', contactId);
        /**
       * 1. set
       */
        if (file) {
            return;
        }
        /**
       * 2. get
       */
        const WECHATY_ICON_PNG = path.resolve('../../docs/images/wechaty-icon.png');
        return FileBox.fromFile(WECHATY_ICON_PNG);
    }
    async contactRawPayloadParser(payload) {
        // log.verbose('PuppetXp', 'contactRawPayloadParser(%s)', JSON.stringify(payload))
        return payload;
    }
    async contactRawPayload(id) {
        log.verbose('PuppetXp----------------------', 'contactRawPayload(%s)', id);
        return this.contactStore[id] || {};
    }
    /**
   *
   * Conversation
   *
   */
    async conversationReadMark(conversationId, hasRead) {
        log.verbose('PuppetService', 'conversationRead(%s, %s)', conversationId, hasRead);
    }
    /**
   *
   * Message
   *
   */
    async messageContact(messageId) {
        log.verbose('PuppetXp', 'messageContact(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof ContactMock) {
        //   return attachment.id
        // }
        return this.messageStore[messageId]?.fromId || '';
    }
    async messageImage(messageId, imageType) {
        log.verbose('PuppetXp', 'messageImage(%s, %s[%s])', messageId, imageType, PUPPET.types.Image[imageType]);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof FileBoxInterface) {
        //   return attachment
        // }
        const message = this.messageStore[messageId];
        let base64 = '';
        let fileName = '';
        try {
            if (message?.text) {
                const picData = JSON.parse(message.text);
                const filePath = picData[imageType];
                const dataPath = rootPath + filePath; // 要解密的文件路径
                await fsPromise.access(dataPath);
                const imageInfo = ImageDecrypt(dataPath, messageId);
                // console.info(dataPath, imageInfo.fileName, imageInfo.extension)
                base64 = imageInfo.base64;
                fileName = `message-${messageId}-url-${imageType}.${imageInfo.extension}`;
            }
        }
        catch (err) {
            console.error(err);
        }
        return FileBox.fromBase64(base64, fileName);
    }
    async messageRecall(messageId) {
        log.verbose('PuppetXp', 'messageRecall(%s)', messageId);
        return false;
    }
    async messageFile(id) {
        // const attachment = this.mocker.MockMessage.loadAttachment(id)
        // if (attachment instanceof FileBoxInterface) {
        //   return attachment
        // }
        const message = this.messageStore[id];
        let base64 = '';
        let fileName = '';
        if (message?.type === PUPPET.types.Message.Image) {
            return this.messageImage(id, PUPPET.types.Image.Thumbnail);
        }
        try {
            if (message?.text) {
                const filePath = message.text;
                const dataPath = rootPath + filePath; // 要解密的文件路径
                // console.info(dataPath)
                const imageInfo = ImageDecrypt(dataPath, id);
                // console.info(imageInfo)
                base64 = imageInfo.base64;
                fileName = imageInfo.fileName;
            }
        }
        catch (err) {
            console.error(err);
        }
        return FileBox.fromBase64(base64, fileName);
    }
    async messageUrl(messageId) {
        log.verbose('PuppetXp', 'messageUrl(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof UrlLink) {
        //   return attachment.payload
        // }
        return {
            title: 'mock title for ' + messageId,
            url: 'https://mock.url',
        };
    }
    async messageMiniProgram(messageId) {
        log.verbose('PuppetXp', 'messageMiniProgram(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof MiniProgram) {
        //   return attachment.payload
        // }
        return {
            title: 'mock title for ' + messageId,
        };
    }
    async messageLocation(messageId) {
        log.verbose('PuppetXp', 'messageLocation(%s)', messageId);
        return {
            accuracy: 15,
            address: '北京市北京市海淀区45 Chengfu Rd',
            latitude: 39.995120999999997,
            longitude: 116.334154,
            name: '东升乡政府',
        };
    }
    async messageRawPayloadParser(payload) {
        // console.info(payload)
        return payload;
    }
    async messageRawPayload(id) {
        log.verbose('PuppetXp', 'messageRawPayload(%s)', id);
        const payload = this.messageStore[id];
        if (!payload) {
            throw new Error('no payload');
        }
        return payload;
    }
    async messageSendText(conversationId, text, mentionIdList) {
        if (conversationId.split('@').length === 2 && mentionIdList && mentionIdList[0]) {
            await this.sidecar.sendAtMsg(conversationId, text, mentionIdList[0]);
        }
        else {
            await this.sidecar.sendMsg(conversationId, text);
        }
    }
    async messageSendFile(conversationId, file) {
        // PUPPET.throwUnsupportedError(conversationId, file)
        const filePath = path.resolve(file.name);
        await file.toFile(filePath, true);
        if (file.type === FileBoxType.Url) {
            try {
                await this.sidecar.sendPicMsg(conversationId, filePath);
                fs.unlinkSync(filePath);
            }
            catch {
                fs.unlinkSync(filePath);
            }
        }
        else {
            PUPPET.throwUnsupportedError(conversationId, file);
        }
    }
    async messageSendContact(conversationId, contactId) {
        log.verbose('PuppetXp', 'messageSendUrl(%s, %s)', conversationId, contactId);
        // const contact = this.mocker.MockContact.load(contactId)
        // return this.messageSend(conversationId, contact)
    }
    async messageSendUrl(conversationId, urlLinkPayload) {
        log.verbose('PuppetXp', 'messageSendUrl(%s, %s)', conversationId, JSON.stringify(urlLinkPayload));
        // const url = new UrlLink(urlLinkPayload)
        // return this.messageSend(conversationId, url)
    }
    async messageSendMiniProgram(conversationId, miniProgramPayload) {
        log.verbose('PuppetXp', 'messageSendMiniProgram(%s, %s)', conversationId, JSON.stringify(miniProgramPayload));
        // const miniProgram = new MiniProgram(miniProgramPayload)
        // return this.messageSend(conversationId, miniProgram)
    }
    async messageSendLocation(conversationId, locationPayload) {
        log.verbose('PuppetXp', 'messageSendLocation(%s, %s)', conversationId, JSON.stringify(locationPayload));
    }
    async messageForward(conversationId, messageId) {
        log.verbose('PuppetXp', 'messageForward(%s, %s)', conversationId, messageId);
        const curMessage = this.messageStore[messageId];
        if (curMessage?.type === PUPPET.types.Message.Text) {
            await this.messageSendText(conversationId, curMessage.text || '');
        }
        else {
            PUPPET.throwUnsupportedError(conversationId, messageId);
        }
    }
    /**
   *
   * Room
   *
   */
    async roomRawPayloadParser(payload) { return payload; }
    async roomRawPayload(id) {
        // log.verbose('PuppetXp', 'roomRawPayload(%s)', id)
        return this.roomStore[id] || {};
    }
    async roomList() {
        log.verbose('PuppetXp', 'roomList()');
        const idList = Object.keys(this.roomStore);
        return idList;
    }
    async roomDel(roomId, contactId) {
        log.verbose('PuppetXp', 'roomDel(%s, %s)', roomId, contactId);
    }
    async roomAvatar(roomId) {
        log.verbose('PuppetXp', 'roomAvatar(%s)', roomId);
        const payload = await this.roomPayload(roomId);
        if (payload.avatar) {
            return FileBox.fromUrl(payload.avatar);
        }
        log.warn('PuppetXp', 'roomAvatar() avatar not found, use the chatie default.');
        return qrCodeForChatie();
    }
    async roomAdd(roomId, contactId) {
        log.verbose('PuppetXp', 'roomAdd(%s, %s)', roomId, contactId);
    }
    async roomTopic(roomId, topic) {
        log.verbose('PuppetXp', 'roomTopic(%s, %s)', roomId, topic);
        const payload = await this.roomPayload(roomId);
        if (!topic) {
            return payload.topic;
        }
        else {
            return payload.topic;
        }
    }
    async roomCreate(contactIdList, topic) {
        log.verbose('PuppetXp', 'roomCreate(%s, %s)', contactIdList, topic);
        return 'mock_room_id';
    }
    async roomQuit(roomId) {
        log.verbose('PuppetXp', 'roomQuit(%s)', roomId);
    }
    async roomQRCode(roomId) {
        log.verbose('PuppetXp', 'roomQRCode(%s)', roomId);
        return roomId + ' mock qrcode';
    }
    async roomMemberList(roomId) {
        log.verbose('PuppetXp', 'roomMemberList(%s)', roomId);
        return (await this.roomRawPayload(roomId)).memberIdList;
    }
    async roomMemberRawPayload(roomId, contactId) {
        log.verbose('PuppetXp', 'roomMemberRawPayload(%s, %s)', roomId, contactId);
        const contact = this.contactStore[contactId];
        const MemberRawPayload = {
            avatar: '',
            id: contactId,
            inviterId: contactId,
            name: contact?.name || '',
            roomAlias: contact?.name || '',
        };
        // console.info(MemberRawPayload)
        return MemberRawPayload;
    }
    async roomMemberRawPayloadParser(rawPayload) {
        log.verbose('PuppetXp---------------------', 'roomMemberRawPayloadParser(%s)', rawPayload);
        return rawPayload;
    }
    async roomAnnounce(roomId, text) {
        if (text) {
            return;
        }
        return 'mock announcement for ' + roomId;
    }
    /**
   *
   * Room Invitation
   *
   */
    async roomInvitationAccept(roomInvitationId) {
        log.verbose('PuppetXp', 'roomInvitationAccept(%s)', roomInvitationId);
    }
    async roomInvitationRawPayload(roomInvitationId) {
        log.verbose('PuppetXp', 'roomInvitationRawPayload(%s)', roomInvitationId);
    }
    async roomInvitationRawPayloadParser(rawPayload) {
        log.verbose('PuppetXp', 'roomInvitationRawPayloadParser(%s)', JSON.stringify(rawPayload));
        return rawPayload;
    }
    /**
   *
   * Friendship
   *
   */
    async friendshipRawPayload(id) {
        return { id };
    }
    async friendshipRawPayloadParser(rawPayload) {
        return rawPayload;
    }
    async friendshipSearchPhone(phone) {
        log.verbose('PuppetXp', 'friendshipSearchPhone(%s)', phone);
        return null;
    }
    async friendshipSearchWeixin(weixin) {
        log.verbose('PuppetXp', 'friendshipSearchWeixin(%s)', weixin);
        return null;
    }
    async friendshipAdd(contactId, hello) {
        log.verbose('PuppetXp', 'friendshipAdd(%s, %s)', contactId, hello);
    }
    async friendshipAccept(friendshipId) {
        log.verbose('PuppetXp', 'friendshipAccept(%s)', friendshipId);
    }
    /**
   *
   * Tag
   *
   */
    async tagContactAdd(tagId, contactId) {
        log.verbose('PuppetXp', 'tagContactAdd(%s)', tagId, contactId);
    }
    async tagContactRemove(tagId, contactId) {
        log.verbose('PuppetXp', 'tagContactRemove(%s)', tagId, contactId);
    }
    async tagContactDelete(tagId) {
        log.verbose('PuppetXp', 'tagContactDelete(%s)', tagId);
    }
    async tagContactList(contactId) {
        log.verbose('PuppetXp', 'tagContactList(%s)', contactId);
        return [];
    }
}
export { PuppetXp };
export default PuppetXp;
//# sourceMappingURL=puppet-xp.js.map