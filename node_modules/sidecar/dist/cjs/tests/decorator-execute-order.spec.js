#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Huan(202106) see:
 *  http://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-4
 *
 * Another great blog post with the decorator runtime order tests:
 *  https://medium.com/jspoint/anatomy-of-typescript-decorators-and-their-usage-patterns-487729b34ae6
 */
const tstest_1 = require("tstest");
(0, tstest_1.test)('decorator execute order', async (t) => {
    const orderList = [];
    // arguments.length === 1
    const decorateClass = (target) => { orderList.push('class:' + target.name); };
    // arguments.length === 2
    const decorateProperty = (_target, propertyKey) => { orderList.push('property:' + propertyKey); };
    // arguments.length === 3 && typeof arguments[2] === 'number'
    const decorateParam = (_target, methodKey, index) => { orderList.push('param:' + methodKey + '/' + index); };
    // arguments.length === 3 && typeof arguments[2] === 'object'
    const decorateMethod = (_target, methodKey, _descriptor) => { orderList.push('method:' + methodKey); };
    let Test = class Test {
        method1(_arg) { }
        method2(_arg1, _arg2) { }
    };
    __decorate([
        decorateProperty,
        __metadata("design:type", Object)
    ], Test.prototype, "_prop1", void 0);
    __decorate([
        decorateProperty,
        __metadata("design:type", Object)
    ], Test.prototype, "_prop2", void 0);
    __decorate([
        decorateMethod,
        __param(0, decorateParam),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method1", null);
    __decorate([
        decorateMethod,
        __param(0, decorateParam),
        __param(1, decorateParam),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method2", null);
    Test = __decorate([
        decorateClass
    ], Test);
    void Test;
    /**
     * Huan(202106): Decorator Evaluation
     *  There is a well defined order to how decorators applied to
     *  various declarations inside of a class are applied:
     *    https://www.typescriptlang.org/docs/handbook/decorators.html#decorator-evaluation
     */
    const EXPECTED_ORDER_LIST = [
        'property:_prop1',
        'property:_prop2',
        'param:method1/0',
        'method:method1',
        'param:method2/1',
        'param:method2/0',
        'method:method2',
        'class:Test',
    ];
    t.same(orderList, EXPECTED_ORDER_LIST, 'should get the expected execute order of decorators');
});
//# sourceMappingURL=decorator-execute-order.spec.js.map