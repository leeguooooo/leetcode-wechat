#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
const tstest_1 = require("tstest");
const payload_cjs_1 = __importDefault(require("./payload.cjs"));
const { __sidecar__payloadHook, __sidecar__payloadLog, } = payload_cjs_1.default;
(0, tstest_1.test)('__sidecar__payloadLog()', async (t) => {
    const message = 'test';
    const payload = __sidecar__payloadLog('verbose', 'Test', message);
    const EXPECTED = {
        payload: {
            level: 'verbose',
            message,
            prefix: 'Test',
        },
        type: 'log',
    };
    t.same(payload, EXPECTED, 'should get log payload correctly');
});
(0, tstest_1.test)('__sidecar__payloadHook()', async (t) => {
    const METHOD = 'method';
    const ARGS = ['arg0', 'arg1'];
    const payload = __sidecar__payloadHook(METHOD, ARGS);
    const EXPECTED_PAYLOAD = {
        payload: {
            args: {},
            method: METHOD,
        },
        type: 'hook',
    };
    for (const [idx, item] of ARGS.entries()) {
        EXPECTED_PAYLOAD.payload.args[idx] = item;
    }
    t.same(payload, EXPECTED_PAYLOAD, 'should make hook payload correctly.');
});
//# sourceMappingURL=payload.spec.js.map