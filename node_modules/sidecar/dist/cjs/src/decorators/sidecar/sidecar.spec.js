#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const ret_js_1 = require("../../ret.js");
const sidecar_body_js_1 = require("../../sidecar-body/sidecar-body.js");
const call_js_1 = require("../call/call.js");
const hook_js_1 = require("../hook/hook.js");
const param_type_js_1 = require("../param-type/param-type.js");
const ret_type_js_1 = require("../ret-type/ret-type.js");
const metadata_sidecar_js_1 = require("./metadata-sidecar.js");
const sidecar_js_1 = require("./sidecar.js");
const getFixture = () => {
    let Test = class Test extends sidecar_body_js_1.SidecarBody {
        testMethod(content, n) { return (0, ret_js_1.Ret)(content, n); }
        hookMethod(n) { return (0, ret_js_1.Ret)(n); }
    };
    __decorate([
        (0, call_js_1.Call)(0x42),
        (0, ret_type_js_1.RetType)('pointer', 'Utf8String'),
        __param(0, (0, param_type_js_1.ParamType)('pointer', 'Utf8String')),
        __param(1, (0, param_type_js_1.ParamType)('int')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number]),
        __metadata("design:returntype", Promise)
    ], Test.prototype, "testMethod", null);
    __decorate([
        (0, hook_js_1.Hook)(0x17),
        __param(0, (0, param_type_js_1.ParamType)('int')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "hookMethod", null);
    Test = __decorate([
        (0, sidecar_js_1.Sidecar)('chatbox')
    ], Test);
    return Test;
};
(0, tstest_1.test)('@Sidecar() smoke testing', async (t) => {
    let Test = class Test extends sidecar_body_js_1.SidecarBody {
    };
    Test = __decorate([
        (0, sidecar_js_1.Sidecar)('chatbox')
    ], Test);
    const test = new Test();
    t.equal(Test.name, 'Test', 'should have the original class name after @Sidecar decorated');
    t.ok(test, 'should instanciate decorated class successfully');
});
(0, tstest_1.test)('@Sidecar() viewMetadata()', async (t) => {
    const Test = getFixture();
    const metadata = (0, metadata_sidecar_js_1.getMetadataSidecar)(Test);
    const EXPECTED_DATA = {
        initAgentScript: undefined,
        interceptorList: [
            {
                address: {
                    name: 'hookMethod',
                    paramTypeList: [
                        [
                            'int',
                        ],
                    ],
                    retType: undefined,
                    target: { address: '0x17', moduleName: null, type: 'address' },
                },
            },
        ],
        nativeFunctionList: [
            {
                address: {
                    name: 'testMethod',
                    paramTypeList: [
                        [
                            'pointer',
                            'Utf8String',
                        ],
                        [
                            'int',
                        ],
                    ],
                    retType: [
                        'pointer',
                        'Utf8String',
                    ],
                    target: { address: '0x42', moduleName: null, type: 'address' },
                },
            },
        ],
        sidecarTarget: {
            target: 'chatbox',
            type: 'process',
        },
    };
    t.same(metadata, EXPECTED_DATA, 'should get view from metadata correct');
});
//# sourceMappingURL=sidecar.spec.js.map