#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const target_js_1 = require("./target.js");
(0, tstest_1.test)('normalizeSidecarTarget() processTarget: number', async (t) => {
    const TARGET = 0x1234;
    const EXPECTED = {
        target: TARGET,
        type: 'process',
    };
    const actual = (0, target_js_1.normalizeSidecarTarget)(TARGET);
    t.same(actual, EXPECTED, 'should normalize number to process target');
    t.ok((0, target_js_1.isSidecarTargetProcess)(actual), 'should be a process target');
});
(0, tstest_1.test)('normalizeSidecarTarget() processTarget: string', async (t) => {
    const TARGET = 'namedTarget';
    const EXPECTED = {
        target: TARGET,
        type: 'process',
    };
    const actual = (0, target_js_1.normalizeSidecarTarget)(TARGET);
    t.same(actual, EXPECTED, 'should normalize string to process target');
    t.ok((0, target_js_1.isSidecarTargetProcess)(actual), 'should be a process target');
});
(0, tstest_1.test)('normalizeSidecarTarget() spawnTarget: []', async (t) => {
    const TARGET = [
        'command',
        [
            'arg1',
            'arg2',
        ],
    ];
    const EXPECTED = {
        target: TARGET,
        type: 'spawn',
    };
    const actual = (0, target_js_1.normalizeSidecarTarget)(TARGET);
    t.same(actual, EXPECTED, 'should normalize array to spawn target');
    t.ok((0, target_js_1.isSidecarTargetSpawn)(actual), 'should be a spawn target');
});
(0, tstest_1.test)('normalizeSidecarTarget() obj: {}', async (t) => {
    const TARGET = {
        target: [
            'command',
            ['arg1'],
        ],
        type: 'spawn',
    };
    const actual = (0, target_js_1.normalizeSidecarTarget)(TARGET);
    t.same(actual, TARGET, 'should normalize obj unchanged');
    t.ok((0, target_js_1.isSidecarTargetSpawn)(actual), 'should be a spawn target');
});
(0, tstest_1.test)('normalizeSidecarTarget() undefined', async (t) => {
    const TARGET = undefined;
    const actual = (0, target_js_1.normalizeSidecarTarget)(TARGET);
    t.same(actual, undefined, 'should normalize undefined to undefined');
    t.notOk((0, target_js_1.isSidecarTargetSpawn)(actual), 'should not be a spawn target');
    t.notOk((0, target_js_1.isSidecarTargetProcess)(actual), 'should not be a process target');
});
//# sourceMappingURL=target.spec.js.map