#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const sidecar_metadata_fixture_js_1 = require("../../../tests/fixtures/sidecar-metadata.fixture.js");
const guard_metadata_sidecar_js_1 = require("./guard-metadata-sidecar.js");
(0, tstest_1.test)('guardMetadataSidecar() for valid agent target', async (t) => {
    const fixture = (0, sidecar_metadata_fixture_js_1.getSidecarMetadataFixture)();
    t.doesNotThrow(() => (0, guard_metadata_sidecar_js_1.guardMetadataSidecar)(fixture), 'should validate the fixture');
});
(0, tstest_1.test)('guardMetadataSidecar() for invalid agent target: @ParamType', async (t) => {
    const fixture = (0, sidecar_metadata_fixture_js_1.getSidecarMetadataFixture)();
    // get the first AgentTarget descriptor
    const desc = fixture.nativeFunctionList.filter(x => x.agent)[0];
    desc.agent.paramTypeList = [
        ['pointer'],
    ];
    t.throws(() => (0, guard_metadata_sidecar_js_1.guardMetadataSidecar)(fixture), 'should throw for invalid agent target descriptor: unnecessary @ParamType');
});
(0, tstest_1.test)('guardMetadataSidecar() for invalid agent target: @RetType', async (t) => {
    const fixture = (0, sidecar_metadata_fixture_js_1.getSidecarMetadataFixture)();
    // get the first AgentTarget descriptor
    const desc = fixture.nativeFunctionList.filter(x => x.agent)[0];
    desc.agent.retType = ['pointer'];
    t.throws(() => (0, guard_metadata_sidecar_js_1.guardMetadataSidecar)(fixture), 'should throw for invalid agent target descriptor: unnecessary @RetType');
});
//# sourceMappingURL=guard-metadata-sidecar.spec.js.map