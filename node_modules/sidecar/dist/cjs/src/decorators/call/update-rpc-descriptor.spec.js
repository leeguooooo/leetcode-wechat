#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const events_1 = require("events");
const ret_js_1 = require("../../ret.js");
const constants_js_1 = require("./constants.js");
const update_rpc_descriptor_js_1 = require("./update-rpc-descriptor.js");
(0, tstest_1.test)('update & get call target metadata', async (t) => {
    const AFTER_VALUE = 42;
    class Test {
        constructor() {
            this.script = {
                exports: {
                    testMethod: () => AFTER_VALUE,
                },
            };
        }
        testMethod() { return (0, ret_js_1.Ret)(); }
    }
    const test = new Test();
    const descriptor = Reflect.getOwnPropertyDescriptor(Test.prototype, 'testMethod');
    const beforeValue = await descriptor?.value();
    t.equal(beforeValue, ret_js_1.RET_SYMBOL, 'should get RET_SYMBOL before update rpc method');
    const rpcDescriptor = (0, update_rpc_descriptor_js_1.updateRpcDescriptor)(Test, 'testMethod', descriptor);
    const rpcValue = await rpcDescriptor.value.bind(test)();
    t.equal(rpcValue, AFTER_VALUE, 'should get AFTER_VALUE from rpcValue');
    Object.defineProperty(Test.prototype, 'testMethod', rpcDescriptor);
    const ret = await test.testMethod();
    t.equal(ret, AFTER_VALUE, 'should get a updated method return value');
    await new Promise(setImmediate);
    t.notOk(Test[constants_js_1.DEBUG_CALL_RET_ERROR], 'should not trigger error if the method returns "Ret()"');
});
(0, tstest_1.test)('method to be proxyed must retur "Ret()"', async (t) => {
    const RET_VALUE = 42;
    class Test extends events_1.EventEmitter {
        method() {
            return Promise.resolve(RET_VALUE);
        }
    }
    const descriptor = Reflect.getOwnPropertyDescriptor(Test.prototype, 'method');
    const beforeValue = await descriptor?.value();
    t.equal(beforeValue, RET_VALUE, 'should get ret value from the descriptor');
    (0, update_rpc_descriptor_js_1.updateRpcDescriptor)(Test, 'method', descriptor);
    await new Promise(setImmediate);
    t.ok(Test[constants_js_1.DEBUG_CALL_RET_ERROR], 'should trigger error if the method does not return "Ret()" (We can safely ignore the Error message above this test)');
});
//# sourceMappingURL=update-rpc-descriptor.spec.js.map