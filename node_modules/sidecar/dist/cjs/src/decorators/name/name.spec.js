#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const name_js_1 = require("./name.js");
(0, tstest_1.test)('@Name with metadata', async (t) => {
    const NAME = 'test_name';
    class Test {
        method(test, testName) {
            void test;
            void testName;
        }
    }
    __decorate([
        __param(1, (0, name_js_1.Name)(NAME)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const data = Reflect.getMetadata(name_js_1.PARAMETER_NAME_SYMBOL, instance, 'method');
    /* eslint-disable no-sparse-arrays */
    const EXPECTED_DATA = [, NAME];
    t.same(data, EXPECTED_DATA, 'should get the parameter name data');
});
(0, tstest_1.test)('getParameterName', async (t) => {
    const NAME = 'test_name';
    class Test {
        method(test, testName) {
            void test;
            void testName;
        }
    }
    __decorate([
        __param(1, (0, name_js_1.Name)(NAME)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const nameList = [0, 1].map(i => (0, name_js_1.getParameterName)(instance, 'method', i));
    const EXPECTED_NAME_LIST = [undefined, NAME];
    t.same(nameList, EXPECTED_NAME_LIST, 'should get decorated name list');
});
//# sourceMappingURL=name.spec.js.map