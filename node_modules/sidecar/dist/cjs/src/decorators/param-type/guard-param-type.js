"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.guardParamType = void 0;
const config_js_1 = require("../../config.js");
const type_guard_js_1 = require("../../type-guard.js");
/**
 * Verify the TypeScript param type is matching the NativeType from `ParamType`
 */
function guardParamType(target, propertyKey, parameterIndex, nativeType, pointerTypeList) {
    const designParamTypeList = Reflect.getMetadata('design:paramtypes', target, propertyKey);
    const designParamType = designParamTypeList[parameterIndex];
    config_js_1.log.verbose('Sidecar', 'guardParamType(%s, %s, %s) %s.%s(args[%s]) designType/nativeType/pointerTypes: %s/%s/%s', target.constructor.name, propertyKey, parameterIndex, target.constructor.name, propertyKey, parameterIndex, designParamType?.name ?? 'void', nativeType, pointerTypeList.join(','));
    try {
        (0, type_guard_js_1.guardNativeType)(nativeType)(designParamType);
        if (nativeType === 'pointer') {
            (0, type_guard_js_1.guardPointerType)(pointerTypeList)(designParamType);
        }
    }
    catch (e) {
        config_js_1.log.error('Sidecar', [
            `The "${target.constructor.name}.${String(propertyKey)}(args[${parameterIndex}])`,
            `decorated by "@ParamType(${nativeType}, ...)"`,
            `does match the design type "${designParamType?.name}"`,
        ].join('\n'));
        throw e;
    }
}
exports.guardParamType = guardParamType;
//# sourceMappingURL=guard-param-type.js.map