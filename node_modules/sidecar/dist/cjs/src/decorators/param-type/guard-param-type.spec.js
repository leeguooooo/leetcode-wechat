#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const guard_param_type_js_1 = require("./guard-param-type.js");
(0, tstest_1.test)('guard parame type', async (t) => {
    /**
     * Huan(202106) decorator metadata is emitted only on decorated members
     *  https://stackoverflow.com/questions/51493874/typescript-emits-no-decorator-metadata/51493888#51493888
     */
    const d = (..._args) => { };
    class Test {
        method(s) {
            void s;
        }
    }
    __decorate([
        d,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method", null);
    const test = new Test();
    const EXPECTED_RESULTS = [
        ['int', 'Int', false],
        ['pointer', 'Utf8String', true],
    ];
    for (const [nativeType, pointerType, shouldMatch] of EXPECTED_RESULTS) {
        if (shouldMatch) {
            (0, guard_param_type_js_1.guardParamType)(test, 'method', 0, nativeType, [pointerType]);
            t.pass('should not throw for nativeType: ' + nativeType);
        }
        else {
            t.throws(() => (0, guard_param_type_js_1.guardParamType)(test, 'method', 0, nativeType, [pointerType]), 'should throw for nativeType: ' + nativeType);
        }
    }
});
//# sourceMappingURL=guard-param-type.spec.js.map