#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const ret_type_js_1 = require("./ret-type.js");
const metadata_ret_type_js_1 = require("./metadata-ret-type.js");
const constants_js_1 = require("./constants.js");
(0, tstest_1.test)('RetType with metadata', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const POINTER_TYPE_LIST = ['Pointer', 'Utf8String'];
    class Test {
        method() { return ''; }
    }
    __decorate([
        (0, ret_type_js_1.RetType)(NATIVE_TYPE, ...POINTER_TYPE_LIST),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", String)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const data = Reflect.getMetadata(constants_js_1.RET_TYPE_SYMBOL, instance, 'method');
    /* eslint-disable no-sparse-arrays */
    const EXPECTED_DATA = [
        NATIVE_TYPE,
        ...POINTER_TYPE_LIST,
    ];
    t.same(data, EXPECTED_DATA, 'should get the method ret type data');
});
(0, tstest_1.test)('getRetType()', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const POINTER_TYPE_LIST = ['Pointer', 'Utf8String'];
    class Test {
        method() { return ''; }
    }
    __decorate([
        (0, ret_type_js_1.RetType)(NATIVE_TYPE, ...POINTER_TYPE_LIST),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", String)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const typeList = (0, metadata_ret_type_js_1.getMetadataRetType)(instance, 'method');
    const EXPECTED_NAME_LIST = [
        NATIVE_TYPE,
        ...POINTER_TYPE_LIST,
    ];
    t.same(typeList, EXPECTED_NAME_LIST, 'should get decorated method ret type list');
});
(0, tstest_1.test)('guard ret native types', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const getFixture = () => {
        class Test {
            testMethod() {
                return 42;
            }
        }
        __decorate([
            (0, ret_type_js_1.RetType)(NATIVE_TYPE),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", Number)
        ], Test.prototype, "testMethod", null);
        return Test;
    };
    t.throws(getFixture, 'should throw because the RetType(pointer) is not match the design type `number`');
});
//# sourceMappingURL=ret-type.spec.js.map