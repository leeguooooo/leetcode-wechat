"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sourceHandler = void 0;
/* eslint-disable sort-keys */
const url_1 = require("url");
const config_js_1 = require("../config.js");
const metadata_sidecar_js_1 = require("../decorators/sidecar/metadata-sidecar.js");
const build_agent_source_js_1 = require("../agent/build-agent-source.js");
const extract_class_names_js_1 = require("./extract-class-names.js");
const vm_js_1 = require("./vm.js");
const sourceHandler = async ({ file, name, }) => {
    config_js_1.log.verbose('sidecar-dump <source>', 'file<%s>%s', file, name
        ? `, name<${name}>`
        : '');
    const fileUrl = (0, url_1.pathToFileURL)(file);
    file = fileUrl.href;
    /**
     * Check the class name parameter
     */
    if (!name) {
        const classNameList = await (0, extract_class_names_js_1.extractClassNameList)(fileUrl);
        if (classNameList.length === 0) {
            throw new Error(`There's no @Sidecar decorated class name found in file ${file}`);
        }
        else if (classNameList.length > 1) {
            console.error(`Found multiple @Sidecar decorated classes in ${file}, please specify the class name by --name:\n`);
            console.error(classNameList.map(x => '  ' + x).join('\n'));
            /**
             * return empty string when error
             */
            return '';
        }
        name = classNameList[0];
        config_js_1.log.silly('sidecar-dump <source>', 'detected class name: "%s"', name);
    }
    const runFuncCode = [
        '(async () => {',
        [
            `const { ${name} } = await import('${file}')`,
            `const metadata = getMetadataSidecar(${name})`,
            'const agentSource = await buildAgentSource(metadata)',
            'return agentSource',
        ].join('\n'),
        '})()',
    ].join('\n');
    config_js_1.log.silly('sidecar-dump <source>', runFuncCode);
    const agentSource = await (0, vm_js_1.executeWithContext)(runFuncCode, {
        buildAgentSource: build_agent_source_js_1.buildAgentSource,
        getMetadataSidecar: metadata_sidecar_js_1.getMetadataSidecar,
        url: fileUrl.href,
    });
    if (!agentSource) {
        throw new Error('no agentSource found');
    }
    return agentSource;
};
exports.sourceHandler = sourceHandler;
//# sourceMappingURL=source-handler.js.map