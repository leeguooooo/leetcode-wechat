"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metadataHandler = void 0;
/* eslint-disable sort-keys */
// import slash      from 'slash'
const url_1 = require("url");
const config_js_1 = require("../config.js");
const metadata_sidecar_js_1 = require("../decorators/sidecar/metadata-sidecar.js");
const extract_class_names_js_1 = require("./extract-class-names.js");
const vm_js_1 = require("./vm.js");
const metadataHandler = async ({ file, name, }) => {
    config_js_1.log.verbose('sidecar-dump <metadata>', 'file<%s>, name<%s>', file, name || '');
    const fileUrl = (0, url_1.pathToFileURL)(file);
    file = fileUrl.href;
    /**
     * Check the class name parameter
     */
    if (!name) {
        const classNameList = await (0, extract_class_names_js_1.extractClassNameList)(fileUrl);
        if (classNameList.length === 0) {
            throw new Error(`There's no @Sidecar decorated class name found in file ${file}`);
        }
        else if (classNameList.length > 1) {
            console.error(`Found multiple @Sidecar decorated classes in ${file}, please specify the class name by --name:\n`);
            console.error(classNameList.map(x => '  ' + x).join('\n'));
            /**
             * return empty string when error
             */
            return '';
        }
        name = classNameList[0];
    }
    const runFuncCode = [
        '(async () => {',
        [
            `const { ${name} } = await import('${file}')`,
            `const metadata = JSON.stringify(getMetadataSidecar(${name}), null, 2)`,
            'return metadata',
        ].join('\n'),
        '})()',
    ].join('\n');
    config_js_1.log.silly('sidecar-dump <metadata>', runFuncCode);
    const metadata = await (0, vm_js_1.executeWithContext)(runFuncCode, {
        getMetadataSidecar: metadata_sidecar_js_1.getMetadataSidecar,
        url: fileUrl.href,
    });
    if (!metadata) {
        throw new Error('no metadata found');
    }
    return metadata;
};
exports.metadataHandler = metadataHandler;
//# sourceMappingURL=metadata-handler.js.map