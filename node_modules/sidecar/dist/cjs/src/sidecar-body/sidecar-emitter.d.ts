import type TypedEventEmitter from 'typed-emitter';
import type { ATTACH_SYMBOL, DETACH_SYMBOL, INIT_SYMBOL } from './constants.js';
import type { SidecarPayloadHook, SidecarPayloadLog } from './payload-schemas.js';
declare type AttachedEventListener = () => void;
declare type DetachedEventListener = () => void;
declare type InitedEventListener = () => void;
declare type ErrorEventListener = (e: Error) => void;
declare type HookEventListener = (payload: SidecarPayloadHook['payload']) => void;
declare type LogEventListener = (payload: SidecarPayloadLog['payload']) => void;
interface SidecarEvents {
    [ATTACH_SYMBOL]: AttachedEventListener;
    [DETACH_SYMBOL]: DetachedEventListener;
    [INIT_SYMBOL]: InitedEventListener;
    error: ErrorEventListener;
    hook: HookEventListener;
    log: LogEventListener;
}
declare type SidecarEmitterType = new () => TypedEventEmitter<SidecarEvents>;
declare const SidecarEmitter: SidecarEmitterType;
export { SidecarEmitter };
//# sourceMappingURL=sidecar-emitter.d.ts.map