import * as frida from '../frida.js';
import { ATTACH_SYMBOL, DETACH_SYMBOL, INIT_SYMBOL, SCRIPT_DESTROYED_HANDLER_SYMBOL, SCRIPT_MESSAGRE_HANDLER_SYMBOL, LOG_EVENT_HANDLER, HOOK_EVENT_HANDLER } from './constants.js';
import { SidecarEmitter } from './sidecar-emitter.js';
import { SidecarTarget, SidecarTargetObj } from '../decorators/sidecar/target.js';
export interface SidecarBodyOptions {
    initAgentScript?: string;
    sidecarTarget?: SidecarTarget;
}
declare class SidecarBody extends SidecarEmitter {
    /**
     * Frida Script instance, which is in charge of:
     *  1. init agent
     *  2. create call `exports.rpc.*`
     *  3. create hook and emit events with `Intercepter` and `send`
     */
    script?: frida.Script;
    session?: frida.Session;
    agentSource?: string;
    /**
     * Constructor options:
     */
    initAgentScript?: string;
    sidecarTarget?: SidecarTargetObj;
    /**
     * Whether the attached process has been spawned by Sidecar:
     *  If yes, then sidecar should destroy the process when `detach`
     *  If no, then the sidecar should leave the process as it is when `detach`
     */
    spawnPid?: number;
    constructor(options?: SidecarBodyOptions);
    protected [INIT_SYMBOL](): Promise<void>;
    [ATTACH_SYMBOL](): Promise<void>;
    [DETACH_SYMBOL](): Promise<void>;
    /**
     * ScriptDestroyedHandler
     */
    private [SCRIPT_DESTROYED_HANDLER_SYMBOL];
    /**
     * ScriptMessageHandler
     */
    private [SCRIPT_MESSAGRE_HANDLER_SYMBOL];
    private [LOG_EVENT_HANDLER];
    private [HOOK_EVENT_HANDLER];
}
export { SidecarBody };
//# sourceMappingURL=sidecar-body.d.ts.map