"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetAddress = exports.targetProgram = void 0;
/**
 *   Sidecar - https://github.com/huan/sidecar
 *
 *   @copyright 2021 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const path_1 = __importDefault(require("path"));
const cjs_js_1 = require("../../src/cjs.js");
/**
 * See: https://github.com/frida/frida-node/blob/master/test/data/index.ts
 */
function targetProgram() {
    const chatboxNameList = [
        'chatbox',
        '-',
        process.platform,
    ];
    if (process.platform === 'win32') {
        chatboxNameList.push('.exe');
    }
    return path_1.default.resolve(cjs_js_1.codeRoot, 'examples', 'chatbox', chatboxNameList.join(''));
}
exports.targetProgram = targetProgram;
const chatboxConfig = {
    darwin: {
        arm64: {
            mo: 0x3d88,
            mt: 0x3dc8,
        },
    },
    linux: {
        x64: {
            mo: 0x11e9,
            mt: 0x121f,
        },
    },
    win32: {
        x64: {
            mo: 0x0,
            mt: 0x0,
        },
    },
};
const targetAddressConfig = (config) => (call) => config[process.platform][process.arch][call];
const targetAddress = targetAddressConfig(chatboxConfig);
exports.targetAddress = targetAddress;
//# sourceMappingURL=sidecar-config.js.map