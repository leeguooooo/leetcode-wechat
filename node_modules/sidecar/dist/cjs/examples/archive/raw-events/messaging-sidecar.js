"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingSidecar = void 0;
/**
 * Sidecar example agent
 *
 * Huan <zixia@zixia.net>, June 24, 2021
 *  https://github.com/huan/sidecar
 */
const events_1 = require("events");
const brolog_1 = require("brolog");
const frida = __importStar(require("./frida"));
const load_agent_source_js_1 = require("./load-agent-source.js");
class MessagingSidecar extends events_1.EventEmitter {
    constructor() {
        super();
        brolog_1.log.verbose('MessagingSidecar', 'constructor()');
    }
    async init() {
        brolog_1.log.verbose('MessagingSidecar', 'init()');
        const session = await frida.attach('messaging');
        const agentSource = await (0, load_agent_source_js_1.loadAgentSource)();
        const script = await session.createScript(agentSource);
        script.message.connect(this.scriptMessageHandler.bind(this));
        script.destroyed.connect(this.scriptDestroyedHandler.bind(this));
        await script.load();
        this.session = session;
        this.script = script;
    }
    async start() {
        brolog_1.log.verbose('MessagingSidecar', 'stop()');
        if (!this.script) {
            throw new Error('stop() this.script is undefined!');
        }
        await this.script.exports['init']();
    }
    async stop() {
        brolog_1.log.verbose('MessagingSidecar', 'stop()');
        if (this.script) {
            await this.script.unload();
            this.script = undefined;
        }
        else {
            throw new Error('stop() this.script is undefined!');
        }
        if (this.session) {
            await this.session.detach();
            this.session = undefined;
        }
        else {
            throw new Error('stop() this.session is undefined!');
        }
    }
    /**
     * ScriptMessageHandler
     */
    scriptMessageHandler(message, data) {
        brolog_1.log.verbose('MessagingSidecar', 'scriptMessageHandler(%s, %s)', JSON.stringify(message), data);
        switch (message.type) {
            case frida.MessageType.Send:
                brolog_1.log.silly('MessagingSidecar', 'scriptMessagerHandler() MessageType.Send: %s', JSON.stringify(message.payload));
                this.emitPayload(message.payload, data);
                break;
            case frida.MessageType.Error:
                brolog_1.log.silly('MessagingSidecar', 'scriptMessagerHandler() MessageType.Error: %s', message.stack);
                break;
            default:
                throw new Error('MessagingSidecar: scriptMessagerHandler() Error: unknown message type: ' + message);
        }
        if (data) {
            brolog_1.log.silly('MessagingSidecar', 'scriptMessageHandler() data:', data);
        }
    }
    emitPayload(payload, data) {
        brolog_1.log.verbose('MessagingSidecar', 'emitPayload(%s, %s)', payload, data);
        this.emit('hook', payload);
    }
    /**
     * ScriptDestroyedHandler
     */
    scriptDestroyedHandler() {
        brolog_1.log.verbose('MessagingSidecar', 'scriptDestroyedHandler()');
    }
    async mo(content) {
        brolog_1.log.verbose('MessagingSidecar', 'mo(%s)', content);
        try {
            await this.script.exports['mo']('MessagingSidebar: new messsage send by script.exports.mo()');
        }
        catch (e) {
            console.error(e);
        }
    }
}
exports.MessagingSidecar = MessagingSidecar;
//# sourceMappingURL=messaging-sidecar.js.map