"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FactorialSidecar = void 0;
/**
 *   Sidecar - https://github.com/huan/sidecar
 *
 *   @copyright 2021 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
const path_1 = __importDefault(require("path"));
const mod_js_1 = require("../../src/mod.js");
const cjs_js_1 = require("../../src/cjs.js");
/**
 * Inspired by https://github.com/iddoeldor/frida-snippets#socket-activity
 */
const libFileConfig = {
    darwin: 'libfactorial.dylib',
    linux: 'libfactorial-x64.so',
    win32: 'libfactorial-x64.dll',
};
const spawnTargetConfig = {
    darwin: ['/bin/sleep', ['10']],
    linux: ['/bin/sleep', ['10']],
    win32: ['C:\\Windows\\notepad.exe'],
};
const libFile = libFileConfig[process.platform];
const spawnTarget = spawnTargetConfig[process.platform];
if (!libFile || !spawnTarget) {
    console.error(`process.platform: ${process.platform} is not supported yet.`);
    throw new Error('no libFile or spawnTarget found!');
}
console.log([
    'libFile:',
    libFile,
    '\n',
    'spawnTarget:',
    spawnTarget,
].join(''));
const libPath = path_1.default.join(cjs_js_1.codeRoot, 'examples', 'dynamic-library', libFile).replace(/\\/g, '\\\\');
const initAgentScript = `Module.load('${libPath}')`;
let FactorialSidecar = class FactorialSidecar extends mod_js_1.SidecarBody {
    factorial(n) { return (0, mod_js_1.Ret)(n); }
};
__decorate([
    (0, mod_js_1.Call)((0, mod_js_1.exportTarget)('factorial', libFile)),
    (0, mod_js_1.RetType)('uint64'),
    __param(0, (0, mod_js_1.ParamType)('int')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], FactorialSidecar.prototype, "factorial", null);
FactorialSidecar = __decorate([
    (0, mod_js_1.Sidecar)(spawnTarget, initAgentScript)
], FactorialSidecar);
exports.FactorialSidecar = FactorialSidecar;
//# sourceMappingURL=factorial-sidecar.js.map