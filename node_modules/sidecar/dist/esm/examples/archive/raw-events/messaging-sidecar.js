/**
 * Sidecar example agent
 *
 * Huan <zixia@zixia.net>, June 24, 2021
 *  https://github.com/huan/sidecar
 */
import { EventEmitter } from 'events';
import { log } from 'brolog';
import * as frida from './frida';
import { loadAgentSource } from './load-agent-source.js';
class MessagingSidecar extends EventEmitter {
    constructor() {
        super();
        log.verbose('MessagingSidecar', 'constructor()');
    }
    async init() {
        log.verbose('MessagingSidecar', 'init()');
        const session = await frida.attach('messaging');
        const agentSource = await loadAgentSource();
        const script = await session.createScript(agentSource);
        script.message.connect(this.scriptMessageHandler.bind(this));
        script.destroyed.connect(this.scriptDestroyedHandler.bind(this));
        await script.load();
        this.session = session;
        this.script = script;
    }
    async start() {
        log.verbose('MessagingSidecar', 'stop()');
        if (!this.script) {
            throw new Error('stop() this.script is undefined!');
        }
        await this.script.exports['init']();
    }
    async stop() {
        log.verbose('MessagingSidecar', 'stop()');
        if (this.script) {
            await this.script.unload();
            this.script = undefined;
        }
        else {
            throw new Error('stop() this.script is undefined!');
        }
        if (this.session) {
            await this.session.detach();
            this.session = undefined;
        }
        else {
            throw new Error('stop() this.session is undefined!');
        }
    }
    /**
     * ScriptMessageHandler
     */
    scriptMessageHandler(message, data) {
        log.verbose('MessagingSidecar', 'scriptMessageHandler(%s, %s)', JSON.stringify(message), data);
        switch (message.type) {
            case frida.MessageType.Send:
                log.silly('MessagingSidecar', 'scriptMessagerHandler() MessageType.Send: %s', JSON.stringify(message.payload));
                this.emitPayload(message.payload, data);
                break;
            case frida.MessageType.Error:
                log.silly('MessagingSidecar', 'scriptMessagerHandler() MessageType.Error: %s', message.stack);
                break;
            default:
                throw new Error('MessagingSidecar: scriptMessagerHandler() Error: unknown message type: ' + message);
        }
        if (data) {
            log.silly('MessagingSidecar', 'scriptMessageHandler() data:', data);
        }
    }
    emitPayload(payload, data) {
        log.verbose('MessagingSidecar', 'emitPayload(%s, %s)', payload, data);
        this.emit('hook', payload);
    }
    /**
     * ScriptDestroyedHandler
     */
    scriptDestroyedHandler() {
        log.verbose('MessagingSidecar', 'scriptDestroyedHandler()');
    }
    async mo(content) {
        log.verbose('MessagingSidecar', 'mo(%s)', content);
        try {
            await this.script.exports['mo']('MessagingSidebar: new messsage send by script.exports.mo()');
        }
        catch (e) {
            console.error(e);
        }
    }
}
export { MessagingSidecar };
//# sourceMappingURL=messaging-sidecar.js.map