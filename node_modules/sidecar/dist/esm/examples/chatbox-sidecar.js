var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 *   Sidecar - https://github.com/huan/sidecar
 *
 *   @copyright 2021 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import { Sidecar, SidecarBody, Call, Hook, ParamType, RetType, Ret, } from '../src/mod.js';
let ChatboxSidecar = class ChatboxSidecar extends SidecarBody {
    mo(
    // parameter type is string (UTF-8)
    content) { return Ret(content); }
    mt(
    // parameter type is string (UTF-8)
    content) { return Ret(content); }
};
__decorate([
    Call(0x11e9) // call address
    ,
    RetType('int') // return type is `int`
    ,
    __param(0, ParamType('pointer', 'Utf8String')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ChatboxSidecar.prototype, "mo", null);
__decorate([
    Hook(0x121f) // hook address
    ,
    __param(0, ParamType('pointer', 'Utf8String')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ChatboxSidecar.prototype, "mt", null);
ChatboxSidecar = __decorate([
    Sidecar(['examples/chatbox/chatbox-linux'])
], ChatboxSidecar);
export { ChatboxSidecar };
//# sourceMappingURL=chatbox-sidecar.js.map