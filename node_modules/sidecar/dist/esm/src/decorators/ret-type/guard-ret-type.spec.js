#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { test } from 'tstest';
import { guardRetType, } from './guard-ret-type.js';
test('guard ret type', async (t) => {
    const triggerMetadata = (..._args) => { };
    class Test {
        // metadata will only be set when we have a decorator
        syncMethod() {
            return '';
        }
        asyncMethod() {
            return Promise.resolve('');
        }
    }
    __decorate([
        triggerMetadata,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", String)
    ], Test.prototype, "syncMethod", null);
    __decorate([
        triggerMetadata,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Test.prototype, "asyncMethod", null);
    const test = new Test();
    const EXPECTED_RESULTS = [
        ['syncMethod', 'int', 'Int', false],
        ['syncMethod', 'pointer', 'Utf8String', true],
        ['asyncMethod', 'pointer', 'Utf8String', true],
        ['asyncMethod', 'int', 'Int', false],
    ];
    for (const [method, nativeType, pointerType, shouldMatch] of EXPECTED_RESULTS) {
        if (shouldMatch) {
            guardRetType(test, method, nativeType, [pointerType]);
            t.pass('should not throw for method/nativeType: ' + method + '/' + nativeType);
        }
        else {
            t.throws(() => guardRetType(test, 'method', nativeType, [pointerType]), 'should throw for method/nativeType: ' + method + '/' + nativeType);
        }
    }
});
//# sourceMappingURL=guard-ret-type.spec.js.map