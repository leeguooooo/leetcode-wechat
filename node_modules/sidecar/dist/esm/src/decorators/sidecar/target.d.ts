/// <reference types="node" />
import type { spawn } from 'child_process';
import type { TargetProcess } from 'frida';
declare type SpawnParameters = Parameters<typeof spawn>;
export declare type SidecarTargetRawSpawn = [
    command: SpawnParameters[0],
    args?: SpawnParameters[1]
];
export declare type SidecarTargetRaw = TargetProcess | SidecarTargetRawSpawn;
interface SidecarTargetObjProcess {
    type: 'process';
    target: TargetProcess;
}
export interface SidecarTargetObjSpawn {
    type: 'spawn';
    target: SidecarTargetRawSpawn;
}
export declare type SidecarTargetObj = SidecarTargetObjProcess | SidecarTargetObjSpawn;
export declare type SidecarTarget = SidecarTargetRaw | SidecarTargetObj;
declare const normalizeSidecarTarget: (target?: SidecarTarget | undefined) => undefined | SidecarTargetObj;
declare const isSidecarTargetProcess: (target?: SidecarTarget | undefined) => target is SidecarTargetObjProcess;
declare const isSidecarTargetSpawn: (target?: SidecarTarget | undefined) => target is SidecarTargetObjSpawn;
export { normalizeSidecarTarget, isSidecarTargetProcess, isSidecarTargetSpawn, };
//# sourceMappingURL=target.d.ts.map