#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { test } from 'tstest';
import { Ret } from '../../ret.js';
import { Call } from '../call/call.js';
import { Hook } from '../hook/hook.js';
import { ParamType } from '../param-type/param-type.js';
import { RetType } from '../ret-type/ret-type.js';
import { buildSidecarMetadata, } from './build-sidecar-metadata.js';
import { Sidecar } from './sidecar.js';
import { SidecarBody } from '../../sidecar-body/mod.js';
import { agentTarget, exportTarget, } from '../../function-target.js';
const getFixture = () => {
    let Test = class Test extends SidecarBody {
        testMethod(content, n) { return Ret(content, n); }
        hookMethod(n) { return Ret(n); }
        anotherCall(i) { return Ret(i); }
    };
    __decorate([
        Call(0x42),
        RetType('pointer', 'Utf8String'),
        __param(0, ParamType('pointer', 'Utf8String')),
        __param(1, ParamType('int')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number]),
        __metadata("design:returntype", Promise)
    ], Test.prototype, "testMethod", null);
    __decorate([
        Hook(agentTarget('agentVar')),
        __param(0, ParamType('int')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "hookMethod", null);
    __decorate([
        Call(exportTarget('exportNameTest', 'moduleNameTest')),
        RetType('pointer', 'Int'),
        __param(0, ParamType('pointer', 'Int')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Test.prototype, "anotherCall", null);
    Test = __decorate([
        Sidecar('chatbox')
    ], Test);
    return Test;
};
test('@Sidecar() buildSidecarMetadata()', async (t) => {
    const Test = getFixture();
    const meta = buildSidecarMetadata(Test, {
        sidecarTarget: 'chatbox',
    });
    const EXPECTED_DATA = {
        initAgentScript: undefined,
        interceptorList: [
            {
                agent: {
                    name: 'hookMethod',
                    paramTypeList: [
                        [
                            'int',
                        ],
                    ],
                    retType: undefined,
                    target: { funcName: 'agentVar', type: 'agent' },
                },
            },
        ],
        nativeFunctionList: [
            {
                address: {
                    name: 'testMethod',
                    paramTypeList: [
                        [
                            'pointer',
                            'Utf8String',
                        ],
                        [
                            'int',
                        ],
                    ],
                    retType: [
                        'pointer',
                        'Utf8String',
                    ],
                    target: { address: '0x42', moduleName: null, type: 'address' },
                },
            },
            {
                export: {
                    name: 'anotherCall',
                    paramTypeList: [
                        [
                            'pointer',
                            'Int',
                        ],
                    ],
                    retType: [
                        'pointer',
                        'Int',
                    ],
                    target: { exportName: 'exportNameTest', moduleName: 'moduleNameTest', type: 'export' },
                },
            },
        ],
        sidecarTarget: {
            target: 'chatbox',
            type: 'process',
        },
    };
    t.same(meta, EXPECTED_DATA, 'should get metadata correct');
});
//# sourceMappingURL=build-sidecar-metadata.spec.js.map