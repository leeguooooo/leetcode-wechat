import { log, } from '../../config.js';
import { guardPointerType, guardNativeType, } from '../../type-guard.js';
/**
 * Verify the TypeScript param type is matching the NativeType from `ParamType`
 */
function guardParamType(target, propertyKey, parameterIndex, nativeType, pointerTypeList) {
    const designParamTypeList = Reflect.getMetadata('design:paramtypes', target, propertyKey);
    const designParamType = designParamTypeList[parameterIndex];
    log.verbose('Sidecar', 'guardParamType(%s, %s, %s) %s.%s(args[%s]) designType/nativeType/pointerTypes: %s/%s/%s', target.constructor.name, propertyKey, parameterIndex, target.constructor.name, propertyKey, parameterIndex, designParamType?.name ?? 'void', nativeType, pointerTypeList.join(','));
    try {
        guardNativeType(nativeType)(designParamType);
        if (nativeType === 'pointer') {
            guardPointerType(pointerTypeList)(designParamType);
        }
    }
    catch (e) {
        log.error('Sidecar', [
            `The "${target.constructor.name}.${String(propertyKey)}(args[${parameterIndex}])`,
            `decorated by "@ParamType(${nativeType}, ...)"`,
            `does match the design type "${designParamType?.name}"`,
        ].join('\n'));
        throw e;
    }
}
export { guardParamType };
//# sourceMappingURL=guard-param-type.js.map