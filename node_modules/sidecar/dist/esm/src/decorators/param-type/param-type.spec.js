#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { test } from 'tstest';
import { ParamType, } from './param-type.js';
import { getMetadataParamType, } from './metadata-param-type.js';
import { PARAM_TYPE_SYMBOL, } from './constants.js';
test('ParamType with metadata', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const POINTER_TYPE_LIST = ['Pointer', 'Utf8String'];
    class Test {
        method(n, content) {
            void n;
            void content;
        }
    }
    __decorate([
        __param(1, ParamType(NATIVE_TYPE, ...POINTER_TYPE_LIST)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const data = Reflect.getMetadata(PARAM_TYPE_SYMBOL, instance, 'method');
    /* eslint-disable no-sparse-arrays */
    const EXPECTED_DATA = [, [
            NATIVE_TYPE,
            ...POINTER_TYPE_LIST,
        ]];
    t.same(data, EXPECTED_DATA, 'should get the parameter type data');
});
test('getParamType', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const POINTER_TYPE_LIST = ['Pointer', 'Utf8String'];
    class Test {
        method(n, content) {
            void n;
            void content;
        }
    }
    __decorate([
        __param(1, ParamType(NATIVE_TYPE, ...POINTER_TYPE_LIST)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Test.prototype, "method", null);
    const instance = new Test();
    const typeList = getMetadataParamType(instance, 'method');
    const EXPECTED_NAME_LIST = [, [
            NATIVE_TYPE,
            ...POINTER_TYPE_LIST,
        ]];
    t.same(typeList, EXPECTED_NAME_LIST, 'should get decorated parameter type list');
});
test('guard parameter native types', async (t) => {
    const NATIVE_TYPE = 'pointer';
    const POINTER_TYPE_LIST = ['Pointer', 'Utf8String'];
    const getFixture = () => {
        class Test {
            method(n, content) {
                void n;
                void content;
            }
        }
        __decorate([
            __param(1, ParamType(NATIVE_TYPE, ...POINTER_TYPE_LIST)),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Number, Number]),
            __metadata("design:returntype", void 0)
        ], Test.prototype, "method", null);
        return Test;
    };
    // getFixture()
    t.throws(getFixture, 'should throw because the ParamType(pointer) is not match the design type `number`');
});
//# sourceMappingURL=param-type.spec.js.map