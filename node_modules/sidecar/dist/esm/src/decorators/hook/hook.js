import { log, } from '../../config.js';
const HOOK_TARGET_SYMBOL = Symbol('hookTarget');
function updateMetadataHook(target, propertyKey, functionTarget) {
    // Update the parameter names
    Reflect.defineMetadata(HOOK_TARGET_SYMBOL, functionTarget, target, propertyKey);
}
function getMetadataHook(target, propertyKey) {
    // Pull the array of parameter names
    const functionTarget = Reflect.getMetadata(HOOK_TARGET_SYMBOL, target, propertyKey);
    return functionTarget;
}
function Hook(functionTarget) {
    log.verbose('Sidecar', '@Hook(%s)', typeof functionTarget === 'object' ? JSON.stringify(functionTarget)
        : typeof functionTarget === 'number' ? functionTarget.toString(16)
            : functionTarget);
    return function hookMethodDecorator(target, propertyKey, descriptor) {
        log.verbose('Sidecar', '@Hook(%s) hookMethodDecorator(%s, %s, descriptor)', typeof functionTarget === 'object' ? JSON.stringify(functionTarget)
            : typeof functionTarget === 'number' ? functionTarget.toString(16)
                : functionTarget, target.constructor.name, propertyKey);
        updateMetadataHook(target, propertyKey, functionTarget);
        // Huan(202106) TODO: add a replaced function to show a error message when be called.
        return descriptor;
    };
}
export { Hook, getMetadataHook, HOOK_TARGET_SYMBOL, };
//# sourceMappingURL=hook.js.map