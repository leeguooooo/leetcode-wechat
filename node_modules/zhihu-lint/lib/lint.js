/* eslint-disable no-console */

const fs = require('fs')
const path = require('path')
const findCacheDir = require('find-cache-dir')
const debug = require('debug')('zhihu-lint')
const chalk = require('chalk')
const execa = require('execa')
const which = require('npm-which')(__dirname) // 优先从直接依赖取相应 bin 文件，防止外部的其他工具使用了不同版本
const {getChangedFiles, findFiles, gitignore, shellArgs} = require('./utils')
const {name} = require('../package.json')

const logger = {
  info: message => console.log(chalk.gray(message)),
  error: message => console.error(chalk.red(message)),
}

const defaultIgnorePatterns = [
  '**/node_modules/**',
  '**/lerna.json',
  '**/package.json',
  '**/package-lock.json',
  // this may be autogenerated by conventional-changelog
  '**/CHANGELOG.md',
]

const jsExts = ['.js', '.jsx']
const tsExts = [...jsExts, '.ts', '.tsx']

const prettierExts = [
  '.js',
  '.jsx',
  '.ts',
  '.tsx',
  '.json',
  '.css',
  '.md',
  '.mdx',
  '.yml',
  '.yaml',
]

const extsToGlob = exts => {
  // glob bug，'**/*{.js}' 花括号中单个选择找不到文件
  if (exts.length === 1) {
    return `**/*${exts[0]}`
  }
  return `**/*{${exts.join(',')}}`
}

const execPrettier = async ({fix}, inputs) => {
  const defaultGlob = extsToGlob(prettierExts)
  const hasInputs = inputs.length > 0
  logger.info(`$ prettier ${hasInputs ? inputs.join(' ') : defaultGlob}`)
  const argv = {
    config: path.join(__dirname, '../.prettierrc.js'),
    write: fix || undefined,
    check: !fix || undefined,
  }

  if (!hasInputs) {
    inputs = [defaultGlob]
  }

  debug('prettier:inputs', inputs)
  const files = await findFiles(
    inputs,
    {ignore: defaultIgnorePatterns, gitignore: true},
    prettierExts
  )
  debug('prettier:findFiles', files)

  if (!files.length) {
    return
  }

  return execa(which.sync('prettier'), shellArgs(argv, files), {
    stdio: 'inherit',
  })
}

const execESLint = async ({fix}, inputs) => {
  const hasTS = fs.existsSync('tsconfig.json')
  const supportedExts = hasTS ? tsExts : jsExts
  const defaultGlob = extsToGlob(supportedExts)
  const hasInputs = inputs.length > 0
  logger.info(`$ eslint ${hasInputs ? inputs.join(' ') : defaultGlob}`)
  const rcFile = '.eslintrc.js'
  const argv = {
    cache: true,
    // 防止使用方添加不必要的 gitignore；提高性能（如 CI 有目录缓存）；尾斜线确保为目录（ESLint 使文件 hash 化，确保测试时文件也不冲突）
    cacheLocation: path.join(findCacheDir({name}), '/'),
    resolvePluginsRelativeTo: path.resolve(__dirname, '..'),
    // 参数指定的配置文件权重较高，防止不能覆盖配置
    config: fs.existsSync(rcFile)
      ? undefined
      : path.join(__dirname, '..', rcFile),
    fix: fix || undefined,
  }

  if (!hasInputs) {
    inputs = [defaultGlob]
  }
  debug('eslint:inputs', inputs)
  let files = await findFiles(
    inputs,
    {ignore: defaultIgnorePatterns, gitignore: true},
    supportedExts
  )
  debug('eslint:findFiles', files)

  // eslint 指定具体路径时会显示 eslintignore 文件的 warning
  // see https://git.in.zhihu.com/fe/zhihu-lint/issues/2
  files = gitignore(files, '.eslintignore')

  debug('eslint:gitignore', files)
  if (!files.length) {
    return
  }

  return execa(which.sync('eslint'), shellArgs(argv, files), {stdio: 'inherit'})
}

const lint = async ({args: inputs, ...options}) => {
  try {
    if (options.changed) {
      inputs = await getChangedFiles()
    }
    await execESLint(options, inputs)
    debug('eslint:ok')
    await execPrettier(options, inputs)
    debug('prettier:ok')
  } catch (error) {
    process.exit(error && error.code ? error.code : 1)
  }
}

module.exports = lint
